generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(uuid())
  name              String
  email             String  @unique
  password          String
  temporaryPassword String? @map("temporary_password")

  Pedagogue Pedagogue?
  Teacher   Teacher?
  Student   Student?

  occurrences       Occurrence[]        @relation("Occurrence_attendee")
  occurrenceHistory OccurrenceHistory[]

  @@map("users")
}

enum PedagogueRole {
  ADMIN
  COMMON
}

model Pedagogue {
  id     String        @id @default(uuid())
  role   PedagogueRole
  userId String        @map("user_id")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  occurrences Occurrence[]

  @@unique([userId])
  @@index([userId])
  @@map("pedagogues")
}

enum GroupShift {
  MORNING
  AFTERNOON
  NIGHT
}

model Group {
  id       String     @id @default(uuid())
  name     String
  shift    GroupShift
  students Student[]

  @@map("groups")
}

enum OccurrenceType {
  DISCIPLINE
  ABSENCES
  TARDINESS
  UNIFORM
}

model Occurrence {
  id          String         @id @default(uuid())
  teacherId   String         @map("teacher_id")
  authorId    String         @map("author_id")
  title       String
  description String
  type        OccurrenceType
  createdAt   DateTime       @default(now()) @map("created_at")

  author  Pedagogue @relation(fields: [authorId], references: [id])
  teacher Teacher   @relation(fields: [teacherId], references: [id])

  attendees           User[]              @relation("Occurrence_attendee")
  students            Student[]           @relation("Occurrence_students")
  occurrenceHistories OccurrenceHistory[]
  attachments         Attachment[]

  @@index([teacherId])
  @@index([authorId])
  @@map("occurrences")
}

model OccurrenceHistory {
  id            String   @id @default(uuid())
  editorId      String   @map("editor_id")
  occurrenceId  String   @map("Occurrence_id")
  createdAt     DateTime @default(now()) @map("created_at")
  changedFields String[] @map("changed_fields")

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
  editor     User       @relation(fields: [editorId], references: [id])

  @@index([editorId])
  @@index([occurrenceId])
  @@map("occurrence_histories")
}

model Student {
  id               String @id @default(uuid())
  userId           String @unique @map("user_id")
  groupId          String @map("group_id")
  cpf              String @unique
  responsiblePhone String
  responsibleEmail String @unique

  occurrences Occurrence[] @relation("Occurrence_students")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([groupId])
  @@map("students")
}

enum TeacherStatus {
  ACTIVE
  INACTIVE
}

model Teacher {
  id     String        @id @default(uuid())
  userId String        @map("user_id")
  status TeacherStatus

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  occurrences Occurrence[]

  @@unique([userId])
  @@index([userId])
  @@map("teachers")
}

model Attachment {
  id           String @id @default(uuid())
  title        String
  url          String
  occurrenceId String @map("Occurrence_id")

  occurrence Occurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)

  @@index([occurrenceId])
  @@map("attachments")
}
